/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Note as PrismaNote } from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class NoteServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.NoteCountArgs, "select">): Promise<number> {
    return this.prisma.note.count(args);
  }

  async notes(args: Prisma.NoteFindManyArgs): Promise<PrismaNote[]> {
    return this.prisma.note.findMany(args);
  }
  async note(args: Prisma.NoteFindUniqueArgs): Promise<PrismaNote | null> {
    return this.prisma.note.findUnique(args);
  }
  async createNote(args: Prisma.NoteCreateArgs): Promise<PrismaNote> {
    return this.prisma.note.create(args);
  }
  async updateNote(args: Prisma.NoteUpdateArgs): Promise<PrismaNote> {
    return this.prisma.note.update(args);
  }
  async deleteNote(args: Prisma.NoteDeleteArgs): Promise<PrismaNote> {
    return this.prisma.note.delete(args);
  }

  async uploadAudioFile<T extends Prisma.NoteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaNote> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "audioFile";
    const audioFile = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.note.update({
      where: args.where,

      data: {
        audioFile: audioFile as InputJsonValue,
      },
    });
  }

  async downloadAudioFile<T extends Prisma.NoteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteFindUniqueArgs>
  ): Promise<FileDownload> {
    const { audioFile } = await this.prisma.note.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      audioFile as unknown as LocalStorageFile
    );
  }

  async deleteAudioFile<T extends Prisma.NoteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteFindUniqueArgs>
  ): Promise<PrismaNote> {
    const { audioFile } = await this.prisma.note.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      audioFile as unknown as LocalStorageFile
    );

    return await this.prisma.note.update({
      where: args.where,

      data: {
        audioFile: Prisma.DbNull,
      },
    });
  }
}
